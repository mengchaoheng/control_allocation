function [u,z,iters] = dir_alloc_six(umin,umax,A,Ad7,Ad14,P_inv)
% (c) mengchaoheng
% Last edited 2019-11
%   min z=c*x   subj. to  A*x (=、 >=、 <=) b
%   x 
% 原问题
% Performs direct control allocation by solving the LP
%   max z=a   subj. to  Bu = av
%   a,u               umin <= u <= umax
% If a > 1, set u = u/a.
% Note: This function has not been optimized for speed.
%  Inputs:
%  -------
% B     control effectiveness matrix (k x m)
% v     commanded virtual control (k x 1)
% umin  lower position limits (m x 1)
% umax  upper position limits (m x 1)
%  Outputs:
%  -------
% u     optimal control (m x 1)
% a     scaling factor  
%% 整理成
%   min z=[0 -1]x   subj. to  [B -v]x = 0
%   x                       [I 0;-I 0]x <= [umax; -umin]
%   其中 x=[u; a]
% 对应《凸优化》p139,记为
%   min z=c*x   subj. to  Aeq*x = beq
%   x                     G*x <= h
% 合并
%   min z=c*x   subj. to  [Aeq; G]*x (=、<=) [beq;h]
%   x                     
% 保证x>=0，变形
%   min z=[c -c]*X   subj. to  [Aeq -Aeq;G -G]*X (=、<=) [beq;h]
%    X                                          
% 其中 X=[x^+; x^-]
%%
% Aeq=[B -v];
beq=zeros(3,1);
% G=[eye(7);-eye(7)];
h=[umax; 20; -umin; 0];
%b求解线性规划
b=[beq;h];

%% 构造线性规划标准型
% Convert free variables to positively constrained variables
% Ad=[Aeq -Aeq; G -G];
% Ad只有第7、第14列的前三行根据v不同而不同，其他固定不变
% Ad=[B -v -B v; eye(7) -eye(7);-eye(7) eye(7)];
% [mad,~]= size(Ad);
mad=17;
nad=28;
% 先把前三个等式的基找到，并化简
% P=[Ad(1:3,1:3) zeros(3,mad-3);Ad(4:mad,1:3) eye(mad-3)];% 常量
% P_inv=[ -2    -4     6     0     0     0     0     0     0     0     0     0     0     0     0     0     0;
%          6     4    -6     0     0     0     0     0     0     0     0     0     0     0     0     0     0;
%         -4     0     6     0     0     0     0     0     0     0     0     0     0     0     0     0     0;
%          2     4    -6     1     0     0     0     0     0     0     0     0     0     0     0     0     0;
%         -6    -4     6     0     1     0     0     0     0     0     0     0     0     0     0     0     0;
%          4     0    -6     0     0     1     0     0     0     0     0     0     0     0     0     0     0;
%          0     0     0     0     0     0     1     0     0     0     0     0     0     0     0     0     0;
%          0     0     0     0     0     0     0     1     0     0     0     0     0     0     0     0     0;
%          0     0     0     0     0     0     0     0     1     0     0     0     0     0     0     0     0;
%          0     0     0     0     0     0     0     0     0     1     0     0     0     0     0     0     0;
%         -2    -4     6     0     0     0     0     0     0     0     1     0     0     0     0     0     0;
%          6     4    -6     0     0     0     0     0     0     0     0     1     0     0     0     0     0;
%         -4     0     6     0     0     0     0     0     0     0     0     0     1     0     0     0     0;
%          0     0     0     0     0     0     0     0     0     0     0     0     0     1     0     0     0;
%          0     0     0     0     0     0     0     0     0     0     0     0     0     0     1     0     0;
%          0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     1     0;
%          0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     1];
         
% 求逆
% Ad_eye=P\Ad;% 化简
% 无关列的逆阵P_inv是常矩阵

% P_inv=inv_mch(P,mad,mad); % 常量
% Ad_eye=P_inv*Ad;
% Ad_eye =[
% 
%     1.0000   -0.0000   -0.0000    1.0000    2.0000    2.0000  0   -1.0000    0.0000    0.0000   -1.0000   -2.0000   -2.0000  0;
%     0.0000    1.0000    0.0000   -2.0000   -3.0000   -2.0000  0   -0.0000   -1.0000   -0.0000    2.0000    3.0000    2.0000  0;
%    -0.0000   -0.0000    1.0000    2.0000    2.0000    1.0000  0    0.0000    0.0000   -1.0000   -2.0000   -2.0000   -1.0000  0;
%          0    0.0000    0.0000   -1.0000   -2.0000   -2.0000  0         0   -0.0000   -0.0000    1.0000    2.0000    2.0000  0;
%    -0.0000         0   -0.0000    2.0000    3.0000    2.0000  0    0.0000         0    0.0000   -2.0000   -3.0000   -2.0000  0;
%     0.0000    0.0000         0   -2.0000   -2.0000   -1.0000  0   -0.0000   -0.0000         0    2.0000    2.0000    1.0000  0;
%          0         0         0    1.0000         0         0  0         0         0         0   -1.0000         0         0  0;
%          0         0         0         0    1.0000         0  0         0         0         0         0   -1.0000         0  0;
%          0         0         0         0         0    1.0000  0         0         0         0         0         0   -1.0000  0;
%          0         0         0         0         0         0  0         0         0         0         0         0         0  0;
%          0   -0.0000   -0.0000    1.0000    2.0000    2.0000  0         0    0.0000    0.0000   -1.0000   -2.0000   -2.0000  0;
%     0.0000         0    0.0000   -2.0000   -3.0000   -2.0000  0   -0.0000         0   -0.0000    2.0000    3.0000    2.0000  0;
%    -0.0000   -0.0000         0    2.0000    2.0000    1.0000  0    0.0000    0.0000         0   -2.0000   -2.0000   -1.0000  0;
%          0         0         0   -1.0000         0         0  0         0         0         0    1.0000         0         0  0;
%          0         0         0         0   -1.0000         0  0         0         0         0         0    1.0000         0  0;
%          0         0         0         0         0   -1.0000  0         0         0         0         0         0    1.0000  0;
%          0         0         0         0         0         0  0         0         0         0         0         0         0  0];
%  Ad_eye1=[
%     1.0000   -0.0000   -0.0000    1.0000    2.0000    2.0000  ;
%     0.0000    1.0000    0.0000   -2.0000   -3.0000   -2.0000  ;
%    -0.0000   -0.0000    1.0000    2.0000    2.0000    1.0000  ;
%          0    0.0000    0.0000   -1.0000   -2.0000   -2.0000  ;
%    -0.0000         0   -0.0000    2.0000    3.0000    2.0000  ;
%     0.0000    0.0000         0   -2.0000   -2.0000   -1.0000  ;
%          0         0         0    1.0000         0         0  ;
%          0         0         0         0    1.0000         0  ;
%          0         0         0         0         0    1.0000  ;
%          0         0         0         0         0         0  ;
%          0   -0.0000   -0.0000    1.0000    2.0000    2.0000  ;
%     0.0000         0    0.0000   -2.0000   -3.0000   -2.0000  ;
%    -0.0000   -0.0000         0    2.0000    2.0000    1.0000  ; 
%          0         0         0   -1.0000         0         0  ;
%          0         0         0         0   -1.0000         0  ;
%          0         0         0         0         0   -1.0000  ;
%          0         0         0         0         0         0  ];
%  Ad_eye2 =[
%         -1.0000    0.0000    0.0000   -1.0000   -2.0000   -2.0000  ;
%         -0.0000   -1.0000   -0.0000    2.0000    3.0000    2.0000  ;
%          0.0000    0.0000   -1.0000   -2.0000   -2.0000   -1.0000  ;
%               0   -0.0000   -0.0000    1.0000    2.0000    2.0000  ;
%          0.0000         0    0.0000   -2.0000   -3.0000   -2.0000  ;
%         -0.0000   -0.0000         0    2.0000    2.0000    1.0000  ;
%               0         0         0   -1.0000         0         0  ;
%               0         0         0         0   -1.0000         0  ;
%               0         0         0         0         0   -1.0000  ;
%               0         0         0         0         0         0  ;
%               0    0.0000    0.0000   -1.0000   -2.0000   -2.0000  ;
%         -0.0000         0   -0.0000    2.0000    3.0000    2.0000  ;
%          0.0000    0.0000         0   -2.0000   -2.0000   -1.0000  ;
%               0         0         0    1.0000         0         0  ;
%               0         0         0         0    1.0000         0  ;
%               0         0         0         0         0    1.0000  ;
%               0         0         0         0         0         0  ];

% 根据以上分析，P_inv*Ad只有第5，第10列依v不同而变化。
Ak1=zeros(17,1);
Ak2=zeros(17,1);
for i=1:17
    temp1=0;
    temp2=0;
    for k=1:17
%         temp1=temp1 + P_inv(i,k)*Ad(k,7);
%         temp2=temp2 + P_inv(i,k)*Ad(k,14);
        temp1=temp1 + P_inv(i,k)*Ad7(k);
        temp2=temp2 + P_inv(i,k)*Ad14(k);
    end
%     Ad_eye(i,7)=temp1;
%     Ad_eye(i,14)=temp2;
    Ak1(i)=temp1;
    Ak2(i)=temp2;

end
% 加上松弛变量对应的基
% A=[Ad_eye(1:3,1:14) zeros(3,14); Ad_eye(4:17,1:14) eye(14)];
% A1=[zeros(3,14); eye(14)];
% A=[Ad_eye1 Ak1 Ad_eye2 Ak2 A1]
% A是Ad_eye的扩充，第7，第14列与P_inv*Ad变化的部分列有关，其他是常数
A(:,7)=Ak1;
A(:,14)=Ak2;
c=[0 0 0 0 0 0 -1 0 0 0 0 0 0 1 zeros(1,14)];
basis=[1:3 15:28];% 转C需要特别注意下标的区别
z = 0;
%% Simplex algorithm
%% Iterate through simplex algorithm main loop
[x,z,iters]=Simplex_loop_C(basis, A, b, c, z,mad,nad); % 线性规划单纯形法
% [x,z,iters]=Simplex_loop_mch(basis, A, b, c, z);
u1=x(1:6)-x(8:13);
if z>1  % 放大了倍数，再还原，若小于1，则表示需要缩小，x已经自然到达边界
    u = u1./(z);
else
    u=u1;
end
end